generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
  NextAuth core models
  Source: https://authjs.dev/reference/adapter/prisma
*/
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?

  // Business fields
  stripeCustomerId String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  subscriptions  Subscription[]
  quotas         Quota[]
  imageJobs      ImageJob[]
  auditLogs      AuditLog[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/*
  Subscription and entitlement models
*/
enum PlanTier {
  FREE
  BASIC_50     // $2 / 50 per month
  PLUS_200     // $5 / 200 per month
  PRO_1000     // $10 / 1000 per month
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  status               String
  planTier             PlanTier?
  stripeCustomerId     String?
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  anchorUtcDay         Int?      // cycle anchor day of month (target: 1)
  updatedAt            DateTime  @updatedAt
  createdAt            DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Quota {
  id               String   @id @default(cuid())
  userId           String
  // Month bucket in UTC in the format YYYY-MM (e.g., "2025-09")
  monthUtc         String
  freeRemaining    Int      @default(0)
  paidRemaining    Int      @default(0)
  watermarkExempt  Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, monthUtc])
  @@index([monthUtc])
}

/*
  Image generation pipeline
*/
enum JobStatus {
  QUEUED
  PROCESSING
  BLOCKED
  COMPLETED
  FAILED
}

enum StylePreset {
  BYZANTINE
  GOTHIC
  CYBERPUNK
}

model ImageJob {
  id             String     @id @default(cuid())
  userId         String
  inputBlobUrl   String
  outputBlobUrl  String?
  status         JobStatus   @default(QUEUED)
  style          StylePreset?
  promptVariant  String?
  blockedReason  String?
  synthIdStatus  String?
  createdAt      DateTime    @default(now())
  completedAt    DateTime?

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderationRecords   ModerationRecord[]
  generationEvents    GenerationEvent[]

  @@index([userId, status])
  @@index([createdAt])
}

/*
  Moderation and auditability
*/
enum ModDecision {
  ALLOW
  BLOCK
  REVIEW
}

model ModerationRecord {
  id             String       @id @default(cuid())
  jobId          String
  rulesViolated  String[]     // e.g., ["nudity_beyond_feet", "minors_detected"]
  safetyScores   Json?
  minorPresence  Boolean?
  decision       ModDecision
  reviewerId     String?      // if manual review later
  createdAt      DateTime     @default(now())

  job ImageJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([decision])
}

model GenerationEvent {
  id         String   @id @default(cuid())
  jobId      String
  step       String
  detailJson Json?
  createdAt  DateTime @default(now())

  job ImageJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([createdAt])
}

model WebhookEvent {
  id             String   @id @default(cuid())
  type           String
  stripeEventId  String?  @unique
  payloadJson    Json
  processedAt    DateTime?
  status         String   // e.g., "processed", "retry", "failed"
  createdAt      DateTime @default(now())

  @@index([type, status])
  @@index([createdAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  subjectId   String?
  contextJson Json?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}