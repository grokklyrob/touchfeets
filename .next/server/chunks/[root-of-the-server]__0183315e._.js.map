{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertstevens/Touchfeets/web/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var prisma: PrismaClient | undefined;\n}\n\n/**\n * Prisma singleton for Next.js (avoids hot-reload multiple client instances)\n */\nexport const prisma =\n  globalThis.prisma ??\n  new PrismaClient({\n    log: [\"warn\", \"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;;;;AAAA;;AAUO,MAAM,SACX,WAAW,MAAM,IACjB,IAAI,6IAAY,CAAC;IACf,KAAK;QAAC;QAAQ;KAAQ;AACxB;AAEF,wCAA2C;IACzC,WAAW,MAAM,GAAG;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertstevens/Touchfeets/web/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { type NextAuthOptions, type Session } from \"next-auth\";\nimport type { AdapterUser } from \"next-auth/adapters\";\nimport Google from \"next-auth/providers/google\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport prisma from \"@/lib/prisma\";\n\n/**\n * NextAuth configuration:\n * - Google provider only (no age gate, no TOS gating)\n * - Minimal session: expose user id and email only\n * - Prisma adapter for DB persistence\n */\nexport const authConfig = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID ?? \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET ?? \"\",\n      allowDangerousEmailAccountLinking: false,\n    }),\n    // Email provider can be added later if SMTP is configured\n    // Email({\n    //   server: process.env.EMAIL_SERVER,\n    //   from: process.env.EMAIL_FROM,\n    // }),\n  ],\n  session: {\n    // Database sessions via Prisma Adapter\n    strategy: \"database\",\n  },\n  callbacks: {\n    async session({ session, user }: { session: Session; user: AdapterUser }) {\n      // Return minimal session data as requested\n      if (session.user) {\n        session.user = {\n          id: user.id,\n          email: user.email ?? null,\n          name: user.name ?? null,\n          image: user.image ?? null,\n        } as typeof session.user;\n      }\n      return session;\n    },\n  },\n  // Use secure defaults; set NEXTAUTH_URL and NEXTAUTH_SECRET in env\n} satisfies NextAuthOptions;\n\nconst handler = NextAuth(authConfig);\n\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;;;;;AAAA;AAEA;AACA;AACA;;;;;AAQO,MAAM,aAAa;IACxB,SAAS,IAAA,uKAAa,EAAC,0HAAM;IAC7B,WAAW;QACT,IAAA,gKAAM,EAAC;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;YAClD,mCAAmC;QACrC;KAMD;IACD,SAAS;QACP,uCAAuC;QACvC,UAAU;IACZ;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAA2C;YACtE,2CAA2C;YAC3C,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,GAAG;oBACb,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK,IAAI;oBACrB,MAAM,KAAK,IAAI,IAAI;oBACnB,OAAO,KAAK,KAAK,IAAI;gBACvB;YACF;YACA,OAAO;QACT;IACF;AAEF;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}}]
}